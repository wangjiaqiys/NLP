#_*_ coding:utf-8 _*_
import os
import time
import random
import jieba#导入jieba                                          
import sklearn
from sklearn.naive_bayes import MultinomialNB#导入朴素贝叶斯
import nltk
import numpy as np
import pylab as pl
import matplotlib.pyplot as plt

#词统计
def z(word_file):
    words_set = set()
    with open(word_file,'r',encoding='utf-8') as fp:
        for line in fp.readlines():
            word = line.strip()
            if len(word)>0 and word not in words_set:#去掉重复的词
                words_set.add(word)
    return words_set
    
#文本处理，也就是样本生成过程
def text_processing(folder_path,test_size=0.2):
    folder_list = os.listdir(folder_path)
    data_list = []
    class_list = []
    
    #遍历文件夹
    for folder in folder_list:
        new_folder_path = os.path.join(folder_path,folder)
        files = os.listdir(new_folder_path)
        
        #读取文件
        j = 1
        for file in files:
            if j>100: 
                break
            with open(os.path.join(new_folder_path,file),'r',encoding='utf-8') as fp:
                raw = fp.read()
                
            word_cut = jieba.cut(raw,cut_all=False)
            word_list = list(word_cut)
            
            data_list.append(word_list)
            #class_list.append(folder.decode('utf-8'))
            class_list.append(folder)
            j += 1
                
    #划分训练集和测试集
    data_class_list = list(zip(data_list,class_list))
    random.shuffle(data_class_list)
    index = int(len(data_class_list)*test_size) + 1
    train_list = data_class_list[index:]
    test_list = data_class_list[:index]
    
    train_data_list,train_class_list = zip(*train_list)
    test_data_list,test_class_list = zip(*test_list)
    
    #或者用sklearn
    #train_data_list,test_data_list,train_class_liast,test_class_list = sklearn.cross_validation.\
                                                                       #train_test_split(data_list,class_list,test_list=test_list)
    #统计词频放入all_words_dict
    all_words_dict = {}
    for word_list in train_data_list:
        for word in word_list:
            if all_words_dict.__contains__(word):
                all_words_dict[word] += 1
            else:
                all_words_dict[word] = 1
    #key函数利用词频进行降序排序
    all_words_tuple_list = sorted(all_words_dict.items(),key=lambda f:f[1],reverse=True)#按字典的键值来排序
    all_words_list = list(zip(*all_words_tuple_list))[0]
    
    return all_words_list,train_data_list,test_data_list,train_class_list,test_class_list
    
    def words_dict(all_words_list,deletN,stopwords_set=set()):
    #选取特征词
    feature_words = []
    n = 1
    for t in range(deletN,len(all_words_list),1):
        if n > 1000:#feature_words的维度为1000
            break
        if not all_words_list[t].isdigit() and all_words_list[t] not in\
           stopwords_set and 1<len( all_words_list[t])<5:
            feature_words.append(all_words_list[t])
    return feature_words
#文本特征
def text_features(train_data_list,test_data_list,feature_words,flag='nltk'):
    def text_features(text,feature_words):
        text_words = set(text)
        if flag == 'nltk':
            ##nltk特征dict
            features = {word:1 if word in text_words else 0 for word in feature_words}
        elif flag == 'sklearn':
            ##sklearn 特征list
            features = [1 if word in text_words else 0 for word in feature_words]
        else:
            features = []
        return features
    train_feature_list = [text_features(text, feature_words) for text in train_data_list]
    test_feature_list = [text_features(text, feature_words) for text in test_data_list]
    return train_feature_list,test_feature_list

#分类，同事输出准确率等
def text_classifier(train_feature_list,test_feature_list,train_class_list,test_class_list,flag='nltk'):
    if flag == 'nltk':
        trian_flist = zip(train_feature_list,train_class_list)
        test_flist = zip(test_class_list,test_class_list)
        classifier = nltk.classify.NaiveBayesClassifier.train(trian_flist)
        test_accuracy = nltk.classify.accuracy(classifier,test_flist)
    elif flag == 'sklearn':
        classifier = MultinomialNB().fit(train_feature_list,train_class_list)
        test_accuracy = classifier.score(test_feature_list,test_class_list)
    else:
        test_accuracy = []
    return test_accuracy
